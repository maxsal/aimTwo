library(devtools)
document()
document()
usethis::use_mit_license()
document()
document()
document()
check()
?complete.cases
globalVariables(c("parameter", "formula", "mtry", "node_size"))
#' @param exposures vector of exposure variable names; if NULL, assumes all non-outcome variables
#' @param mtry_seq values of mtry to search over. defaults to some recommendations from Breiman
#' @param node_size_seq values of min.node.size to search over. defaults to 5 values between 3 and nrow(data)/100
#' @param n_cores number of cores if parallel
#' @param n_tree number of trees to grow
#' @importFrom ranger ranger
#' @importFrom data.table data.table rbindlist as.data.table
#' @importFrom cli  cli_progress_step cli_alert cli_progress_update cli_progress_done
#' @return return a table with hyperparameters and their values
#' @export
tune_ranger <- function(
data,
outcome,
exposures     = NULL,
mtry_seq      = NULL,
node_size_seq = NULL,
n_cores       = 1,
n_trees       = 500
) {
out <- data.table::data.table()
if (is.null(mtry_seq)) {
p <- ncol(data) - 1
mtry_seq <- round(c(p/2, p/3, sqrt(p) * c(0.5, 1, 2), log2(p)))
}
if (is.null(node_size_seq)) {
node_size_seq <- round(seq(3, round(nrow(data) / 100), length.out = 5))
}
cli::cli_progress_step("Fitting random forest...")
rf <- expand.grid(
mtry        = mtry_seq,
node_size   = node_size_seq,
oob_rmse    = NA
) |> data.table::as.data.table()
cli::cli_alert("Trying {length(mtry_seq)} values of mtry, {length(node_size_seq)} of node size ({nrow(rf)} combinations)")
if (is.null(exposures)) exposures <- names(data)[names(data) != outcome]
f <- formula(paste0(outcome, " ~ ", paste0(exposures, collapse = " + ")))
vars <- c(outcome, exposures)
cli::cli_progress_bar(name = "grid search...", total = nrow(rf))
for (i in 1:nrow(rf)) {
model <- ranger::ranger(
formula         = f,
data            = data[vars],
num.trees       = n_trees,
mtry            = rf$mtry[i],
min.node.size   = rf$node_size[i],
num.threads     = n_cores
)
rf$oob_rmse[i] <- sqrt(model$prediction.error)
cli::cli_progress_update()
}
cli::cli_progress_done()
out <- data.table::rbindlist(list(
out,
data.table::data.table(
"parameter" = c("rf.mtry", "rf.node_size"),
"value"     = c(
rf[which.min(rf$oob_rmse), mtry],
rf[which.min(rf$oob_rmse), node_size]
)
)
), use.names = TRUE, fill = TRUE)
return(out)
}
check()
check()
check()
document()
check()
pak::pak("maxsal/aimTwo")
